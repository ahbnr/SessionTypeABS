module Model;

def List<Int> range(Int start, Int until) =
  if start >= until then
    Nil
  else
    Cons(start, range(start+1, until));

def Int busywait(Int factor) =
  let
    List<Unit> wait = map((Int i) => 
      print(if i >= 0 then "" else "")
    )(range(0, factor))
  in 0;

interface PI {
  Unit m();
}

class P (QI qRef, IndirectionI indirection) implements PI {
  
  Fut<Unit> fm1;
  
  Fut<Unit> fm0;
  

  Unit m() {
    println("m");

    Int i = 0;
    while (i < 500) {
      
      
      fm1 = qRef!m1(i);
      
      
      //busywait(10);
      duration(10, 10);
      
      
      
      fm0 = qRef!m0(i);
      
      
      //busywait(10);
      duration(10, 10);
      
      

      i = i + 1;
    }
  }
}

interface IndirectionI {
  
  
  
  
  
}

class Indirection (QI qRef) implements IndirectionI {
  
  
  
  
  

  
  
  
  
  
}

interface QI {
  
  Unit m1(Int i);
  
  Unit m0(Int i);
  
}

class Q implements QI {
  
  Unit m1(Int i) {
    println("m1(" + toString(i) + ")");
  }
  
  Unit m0(Int i) {
    println("m0(" + toString(i) + ")");
  }
  
}

{
  QI q = new Q();
  IndirectionI indirection = new Indirection(q);
  PI p = new P(q, indirection);

  await p!m();
}